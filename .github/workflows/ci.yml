name: Secure Payments Portal CI

# Trigger the workflow on pushes to the main branch
on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Step 3: Install backend dependencies
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm install

      # Step 4: Install frontend dependencies
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install

      # Step 5: Run backend unit tests
      - name: Run backend security unit tests
        working-directory: ./backend
        run: |
          npm run test -- --detectOpenHandles # Ensure backend tests include password hashing, salting, and RegEx input validation

      # Step 6: Run frontend unit tests
      - name: Run frontend tests
        working-directory: ./frontend
        run: npm run test

      # Step 7: Run ESLint for backend
      - name: Run ESLint on backend
        working-directory: ./backend
        run: npm run lint

      # Step 8: Run ESLint for frontend
      - name: Run ESLint on frontend
        working-directory: ./frontend
        run: npm run lint

      # Step 9: Check for SSL certificate and key presence (for SSL encryption)
      - name: Check SSL configuration
        run: |
          if [ ! -f /path/to/your/ssl/cert ] || [ ! -f /path/to/your/ssl/key ]; then
            echo "SSL certificate or key missing" && exit 1
          else
            echo "SSL certificate and key are present"
          fi

      # Step 10: Enforce HTTPS in application
      - name: Check HTTPS redirection enforcement
        run: |
          status_code=$(curl -s -o /dev/null -w "%{http_code}" https://localhost)
          if [ "$status_code" != "301" ]; then
            echo "HTTPS redirection not enforced, expected 301 but got $status_code" && exit 1
          fi

      # Step 11: Run Vulnerability Scan for known vulnerabilities in backend dependencies
      - name: Run Vulnerability Scan on backend (npm audit)
        working-directory: ./backend
        run: npm audit --audit-level=high

      # Step 12: Run Security Middleware Checks for backend
      - name: Run Security Middleware Checks on backend
        working-directory: ./backend
        run: npm run security-check # Ensure Helmet and Express Brute are configured in the project

      # Step 13: Perform OWASP ZAP Baseline Scan for vulnerabilities
      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.4.0
        with:
          target: 'https://your-app-url.com'

      # Step 14: Security Attack Checks
      - name: Security Attack Checks
        run: |
          # Check for Clickjacking Protection
          if ! grep -q "frameguard" /path/to/your/app.js; then
            echo "Clickjacking protection missing (Helmet's frameguard)" && exit 1
          fi

          # Check for Session Hijacking Protection
          if ! grep -q "cookie-session" /path/to/your/app.js; then
            echo "Session hijacking protection missing (cookie-session or express-session)" && exit 1
          fi

          # Check for SQL Injection Prevention
          if ! grep -q "parameterized queries" /path/to/your/db.js; then
            echo "SQL Injection protection missing (use parameterized queries)" && exit 1
          fi

          # Check for Cross-Site Scripting (XSS) Protection
          if ! grep -q "xss-clean" /path/to/your/app.js; then
            echo "XSS protection missing (xss-clean middleware)" && exit 1
          fi

          # Check for Man-in-the-Middle Attack Protection
          if ! grep -q "strict-transport-security" /path/to/your/app.js; then
            echo "HSTS header missing (use Helmet to enforce Strict-Transport-Security)" && exit 1
          fi

          # DDoS Protection (Rate Limiting and Network Throttling)
          if ! grep -q "express-rate-limit" /path/to/your/app.js; then
            echo "DDoS protection missing (express-rate-limit middleware)" && exit 1
          fi

      # Step 15: Upload results (optional)
      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: ./test-results
