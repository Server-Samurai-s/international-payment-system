name: Secure Payments Portal CI

# Trigger the workflow on pushes to the main branch
on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Clear npm cache to prevent issues
      - name: Clear npm cache
        run: npm cache clean --force

      # Step 3: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Step 4: Install backend dependencies with retry logic using npm ci
      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          retries=3
          count=0
          until [ $count -ge $retries ]
          do
            npm ci && break
            count=$((count+1))
            echo "Retrying npm ci... ($count/$retries)"
            sleep 10
          done

      # Step 5: Install frontend dependencies with retry logic using npm ci
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: |
          retries=3
          count=0
          until [ $count -ge $retries ]
          do
            npm ci && break
            count=$((count+1))
            echo "Retrying npm ci... ($count/$retries)"
            sleep 10
          done

      # Step 6: Install TypeScript and ts-node for frontend (for Jest config parsing)
      - name: Install TypeScript and ts-node
        working-directory: ./frontend
        run: npm install typescript ts-node --save-dev

      # Step 7: Run Vulnerability Scan on backend dependencies (npm audit)
      - name: Run Vulnerability Scan on backend
        working-directory: ./backend
        run: |
          npm audit --audit-level=high || echo "Vulnerabilities found in backend, but continuing with the build."

      # Step 8: Run Vulnerability Scan on frontend dependencies (npm audit)
      - name: Run Vulnerability Scan on frontend
        working-directory: ./frontend
        run: |
          npm audit --audit-level=high || echo "Vulnerabilities found in frontend, but continuing with the build."

      # Step 9: Run backend unit tests
      - name: Run backend unit tests
        working-directory: ./backend
        run: |
          npm test

      # Step 10: Run frontend unit tests
      - name: Run frontend unit tests
        working-directory: ./frontend
        run: |
          npm test

      # Step 11: Run ESLint on backend
      - name: Run ESLint on backend
        working-directory: ./backend
        run: npm run lint

      # Step 12: Check for SSL certificate and key presence
      - name: Check SSL configuration
        run: |
          if [ ! -f ./backend/src/keys/certificate.pem ] || [ ! -f ./backend/src/keys/mongodb-key.pem ]; then
            echo "SSL certificate or key missing" && exit 1
          else
            echo "SSL certificate and key are present"
          fi

      # Step 13: Security Attack Checks
      - name: Security Attack Checks
        run: |
          # Check for Clickjacking Protection
          if ! grep -q "frameguard" ./backend/src/routes/transaction.routes.ts; then
            echo "Clickjacking protection missing (Helmet's frameguard)"
          fi

          # Check for Session Hijacking Protection
          if ! grep -q "cookie-session" ./backend/src/routes/transaction.routes.ts; then
            echo "Session hijacking protection missing (cookie-session or express-session)"
          fi

          # Check for SQL Injection Prevention (ensure Mongoose is used in transaction operations)
          if ! grep -q "mongoose" ./backend/src/routes/transaction.routes.ts; then
            echo "SQL Injection protection missing (ensure Mongoose is used for database operations)"
          fi

          # Check for Cross-Site Scripting (XSS) Protection
          if ! grep -q "xss-clean" ./backend/src/routes/transaction.routes.ts; then
            echo "XSS protection missing (xss-clean middleware)"
          fi

          # Check for Man-in-the-Middle Attack Protection
          if ! grep -q "strict-transport-security" ./backend/src/routes/transaction.routes.ts; then
            echo "HSTS header missing (use Helmet to enforce Strict-Transport-Security)"
          fi

          # DDoS Protection (Rate Limiting and Network Throttling)
          if ! grep -q "express-rate-limit" ./backend/src/routes/transaction.routes.ts; then
            echo "DDoS protection missing (express-rate-limit middleware)"
          fi

      # Step 14: Upload test results if tests or checks fail
      - name: Upload test results on failure
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: ./test-results
